//
// Created by anonymous author on 2022/8/29.
//

#ifndef SCOPE_EXECUTION_H
#define SCOPE_EXECUTION_H

#include <chrono>
#include "graph.h"
#include "decompose.h"
#include "equation.h"
#include "compute_set_intersection.h"
#include "forest.h"
#include "triangle.h"

extern Count gNumIntersect;
extern Count gNumMatch;
extern Count gNumIntermediate;
extern Count gNumEdgeID;
extern Count gNumUpdate;

void saveCount(const std::string &resultPath, std::vector<HashTable> H, const DataGraph &d, bool batchQuery,
               const std::vector<std::string> &files, const std::vector<int> &orbitTypes);
void saveCount(const std::string &resultPath, HashTable h, const DataGraph &d, int orbitType);

void generateCandidate(
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        VertexID *dataV,
        int pos,
        const std::vector<int> &inPos,
        const std::vector<int> &outPos,
        const std::vector<int> &unPos,
        VertexID **candidate,
        ui *&candCount,
        VertexID *&tmp
);

void generateCandidateT(
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        VertexID *dataV,
        int pos,
        bool isTriangle,
        EdgeID e,
        int type,
        const std::vector<int> &inPos,
        const std::vector<int> &outPos,
        const std::vector<int> &unPos,
        VertexID **candidate,
        ui *&candCount,
        VertexID *&tmp
);

ui computeEdgeKey(
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        int mappingSize,
        ui *pos,
        int edgeType,
        VertexID src,
        VertexID dst
);

void executeNode(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID **candidate,
        ui *candCount,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Pattern &p,
        bool isRoot,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        ui *keyPos,
        ui &keyPosSize,
        ui sizeBound,
        VertexID *&tmp,
        VertexID *allV
);

void executeNodeT(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID **candidate,
        ui *candCount,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        bool isRoot,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        ui *keyPos,
        ui &keyPosSize,
        ui sizeBound,
        VertexID *&tmp,
        VertexID *allV
);

void executeNodeEdgeKey(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID **candidate,
        ui *candCount,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Pattern &p,
        bool isRoot,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        ui *keyPos,
        ui &keyPosSize,
        ui sizeBound,
        VertexID *&tmp,
        VertexID *allV
);

void executeNodeEdgeKeyT(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID **candidate,
        ui *candCount,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        bool isRoot,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        ui *keyPos,
        ui &keyPosSize,
        ui sizeBound,
        VertexID *&tmp,
        VertexID *allV
);

void executePartition(
        VertexID pID,
        const Tree &t,
        VertexID ***candidate,
        ui **candCount,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        bool useTriangle,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeTree(
        const Tree &t,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        bool useTriangle,
        const Triangle &tri,
        const Pattern &p,
        HashTable *H,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void multiJoin(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID ***candidates,
        ui **candCounts,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID **startOffsets,
        VertexID **patternVs,
        VertexID **dataVs,
        bool **visits,
        ui **poses,
        ui **keyPoses,
        ui *keyPosSizes,
        ui *sizeBounds,
        VertexID *&tmp,
        VertexID *allV
);

void multiJoinT(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID ***candidates,
        ui **candCounts,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID **startOffsets,
        VertexID **patternVs,
        VertexID **dataVs,
        bool **visits,
        ui **poses,
        ui **keyPoses,
        ui *keyPosSizes,
        ui *sizeBounds,
        VertexID *&tmp,
        VertexID *allV
);

void multiJoinE(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID ***candidates,
        ui **candCounts,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID **startOffsets,
        VertexID **patternVs,
        VertexID **dataVs,
        bool **visits,
        ui **poses,
        ui **keyPoses,
        ui *keyPosSizes,
        ui *sizeBounds,
        VertexID *&tmp,
        VertexID *allV
);

void multiJoinET(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID ***candidates,
        ui **candCounts,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID **startOffsets,
        VertexID **patternVs,
        VertexID **dataVs,
        bool **visits,
        ui **poses,
        ui **keyPoses,
        ui *keyPosSizes,
        ui *sizeBounds,
        VertexID *&tmp,
        VertexID *allV
);

void multiJoinWrapper(
        VertexID nID,
        const Tree &t,
        const std::vector<VertexID> &child,
        VertexID ***candidates,
        ui **candCounts,
        HashTable *H,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        bool useTriangle,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID **startOffsets,
        VertexID **patternVs,
        VertexID **dataVs,
        bool **visits,
        ui **poses,
        ui **keyPoses,
        ui *keyPosSizes,
        ui *sizeBounds,
        VertexID *&tmp,
        VertexID *allV
);

void multiJoinTree(
        const Tree &t,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        bool useTriangle,
        const Triangle &tri,
        const Pattern &p,
        HashTable *H,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID **startOffset,
        VertexID **patternV,
        VertexID **dataV,
        bool **visited,
        VertexID *&tmp,
        VertexID *allV
);

void executeSharedNode(
        const Node &rep,
        const std::vector<std::vector<VertexID>> &children,
        const std::vector<VertexID> &nIDs,
        const std::vector<Tree> &trees,
        std::vector<HashTable *> &hashTables,
        const std::vector<std::vector<int>> &aggreWeights,
        const std::vector<int> &id2AggreKey,
        const std::vector<int> &id2ChildKey,
        const std::vector<bool> &isRoot,
        const std::vector<std::vector<std::vector<int>>> &childKeyPoses,
        const std::vector<std::vector<int>> &aggrePoses,
        const std::vector<int> &tableIDs,
        std::vector<ui *> &keyPos,
        std::vector<ui> &keyPosSize,
        const std::vector<ui> &sizeBound,
        const std::vector<bool> &nodeInterPos,
        const std::vector<std::vector<int>> &nodeInPos,
        const std::vector<std::vector<int>> &nodeOutPos,
        const std::vector<std::vector<int>> &nodeUnPos,
        const std::vector<std::vector<int>> &greaterPos,
        const std::vector<std::vector<int>> &lessPos,
        const std::vector<int> &nonLeafIDs,
        VertexID **candidate,
        ui *candCount,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeSharedNodeT(
        const Node &rep,
        const std::vector<std::vector<VertexID>> &children,
        const std::vector<VertexID> &nIDs,
        const std::vector<Tree> &trees,
        std::vector<HashTable *> &hashTables,
        const std::vector<std::vector<int>> &aggreWeights,
        const std::vector<int> &id2AggreKey,
        const std::vector<int> &id2ChildKey,
        const std::vector<bool> &isRoot,
        const std::vector<std::vector<std::vector<int>>> &childKeyPoses,
        const std::vector<std::vector<int>> &aggrePoses,
        const std::vector<int> &tableIDs,
        std::vector<ui *> &keyPos,
        std::vector<ui> &keyPosSize,
        const std::vector<ui> &sizeBound,
        const std::vector<bool> &nodeInterPos,
        const std::vector<std::vector<int>> &nodeInPos,
        const std::vector<std::vector<int>> &nodeOutPos,
        const std::vector<std::vector<int>> &nodeUnPos,
        const std::vector<bool> &nodeCandPos,
        const std::vector<std::vector<int>> &greaterPos,
        const std::vector<std::vector<int>> &lessPos,
        const std::vector<std::pair<int, int>> &nodeTriPos,
        const std::vector<int> &triEdgeType,
        const std::vector<int> &triEndType,
        const std::vector<int> &nonLeafIDs,
        VertexID **candidate,
        ui *candCount,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeSharedNodeEdgeKey(
        const Node &rep,
        const std::vector<std::vector<VertexID>> &children,
        const std::vector<VertexID> &nIDs,
        const std::vector<Tree> &trees,
        std::vector<HashTable *> &hashTables,
        const std::vector<std::vector<int>> &aggreWeights,
        const std::vector<int> &id2AggreKey,
        const std::vector<int> &id2ChildKey,
        const std::vector<bool> &isRoot,
        const std::vector<std::vector<std::vector<int>>> &childKeyPoses,
        const std::vector<std::vector<int>> &aggrePoses,
        const std::vector<int> &tableIDs,
        std::vector<ui *> &keyPos,
        std::vector<ui> &keyPosSize,
        const std::vector<ui> &sizeBound,
        const std::vector<bool> &nodeInterPos,
        const std::vector<std::vector<int>> &nodeInPos,
        const std::vector<std::vector<int>> &nodeOutPos,
        const std::vector<std::vector<int>> &nodeUnPos,
        const std::vector<std::vector<int>> &greaterPos,
        const std::vector<std::vector<int>> &lessPos,
        const std::vector<std::vector<std::pair<int, int>>> &posChildEdge,
        const std::vector<std::vector<std::pair<int, int>>> &posAggreEdge,
        const std::vector<std::vector<int>> &childEdgeType,
        const std::vector<std::vector<int>> &aggreEdgeType,
        const std::vector<int> &nonLeafIDs,
        VertexID **candidate,
        ui *candCount,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeSharedNodeEdgeKeyT(
        const Node &rep,
        const std::vector<std::vector<VertexID>> &children,
        const std::vector<VertexID> &nIDs,
        const std::vector<Tree> &trees,
        std::vector<HashTable *> &hashTables,
        const std::vector<std::vector<int>> &aggreWeights,
        const std::vector<int> &id2AggreKey,
        const std::vector<int> &id2ChildKey,
        const std::vector<bool> &isRoot,
        const std::vector<std::vector<std::vector<int>>> &childKeyPoses,
        const std::vector<std::vector<int>> &aggrePoses,
        const std::vector<int> &tableIDs,
        std::vector<ui *> &keyPos,
        std::vector<ui> &keyPosSize,
        const std::vector<ui> &sizeBound,
        const std::vector<bool> &nodeInterPos,
        const std::vector<std::vector<int>> &nodeInPos,
        const std::vector<std::vector<int>> &nodeOutPos,
        const std::vector<std::vector<int>> &nodeUnPos,
        const std::vector<bool> &nodeCandPos,
        const std::vector<std::vector<int>> &greaterPos,
        const std::vector<std::vector<int>> &lessPos,
        const std::vector<std::vector<std::pair<int, int>>> &posChildEdge,
        const std::vector<std::vector<std::pair<int, int>>> &posAggreEdge,
        const std::vector<std::vector<int>> &childEdgeType,
        const std::vector<std::vector<int>> &aggreEdgeType,
        const std::vector<std::pair<int, int>> &nodeTriPos,
        const std::vector<int> &nonLeafIDs,
        const std::vector<int> &triEdgeType,
        const std::vector<int> &triEndType,
        VertexID **candidate,
        ui *candCount,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeConNode(
        const ConNode &cn,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        bool useTriangle,
        const Triangle &tri,
        const Pattern &p,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeShared(
        ExeParam &param,
        std::vector<ui *> &keyPoses,
        std::vector<ui> &keyPosSize,
        const std::vector<ui> &sizeBound,
        const DataGraph &din,
        const DataGraph &dout,
        const DataGraph &dun,
        bool useTriangle,
        const Triangle &tri,
        EdgeID *outID,
        EdgeID *unID,
        EdgeID *reverseID,
        EdgeID *startOffset,
        VertexID *patternV,
        VertexID *dataV,
        int mappingSize,
        bool *visited,
        ui *pos,
        VertexID *&tmp,
        VertexID *allV
);

void executeForest(Forest &f, std::vector<HashTable> &result, const DataGraph &din,
                   const DataGraph &dout, const DataGraph &dun, bool useTriangle, const Triangle &tri,
                   std::vector<HashTable> &allocatedHashTable, EdgeID *outID, EdgeID *unID, EdgeID *reverseID,
                   EdgeID *startOffset, VertexID *patternV, VertexID *dataV, bool *visited, ui *candPos,
                   VertexID *&tmp, VertexID *allV, specialsparse *sg, VertexID *cliqueVertices);

#endif //SCOPE_EXECUTION_H